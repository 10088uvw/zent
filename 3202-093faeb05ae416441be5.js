(self.webpackChunkzent_docs=self.webpackChunkzent_docs||[]).push([[3202],{73202:(e,o,d)=>{"use strict";d.r(o),d.d(o,{default:()=>m});var c=d(73450),a=d(27378),l=d(57318),i=d(24246);function n(e,o){var d=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);o&&(c=c.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),d.push.apply(d,c)}return d}function r(e){for(var o=1;o<arguments.length;o++){var d=null!=arguments[o]?arguments[o]:{};o%2?n(Object(d),!0).forEach((function(o){(0,c.Z)(e,o,d[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(d)):n(Object(d)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(d,o))}))}return e}function s(e){return(0,i.jsx)(e.tag,r(r({},e.attributes),{},{dangerouslySetInnerHTML:{__html:e.html}}))}function t(e){return(0,i.jsx)(s,{tag:"section",html:e.html,attributes:{className:"zandoc-react-markdown"}})}function p(e){return(0,i.jsx)(s,{tag:"style",html:e.style})}function h(e,o){for(;e;)return e.offsetTop&&"static"!==getComputedStyle(e).position&&(o+=e.offsetTop),h(e.parentNode,o);return o}class m extends a.Component{componentDidMount(){var e=location.hash;if(e){var o=document.querySelector('a[href="'.concat(e,'"]'));o&&(0,l.l)(document.documentElement,0,h(o,-9))}}render(){return a.createElement("div",{className:"zandoc-react-container"},a.createElement(p,{style:""}),a.createElement(t,{html:'<h2 class="anchor-heading"><a href="#form-biao-dan-zu-jian">¶</a><a href="javascript:void(0)" id="form-biao-dan-zu-jian" class="anchor-point"></a>Form 表单组件</h2>\n<h3 class="anchor-heading"><a href="#jing-gao">¶</a><a href="javascript:void(0)" id="jing-gao" class="anchor-point"></a>⚠️ 警告</h3>\n<p>这是新版的 <code>Form</code> 组件，和 <code>7.0.0</code> 之前版本的 <code>Form</code> 组件不兼容，可以在<a href="https://zent-contrib.github.io/zent-compat">这里查看老版 <code>Form</code> 组件的文档</a>。</p>\n<p><code>Form</code> 和其他组件相比，本身功能和 API 都相对复杂，请先仔细阅读完本文档再使用。</p>\n<h3 class="anchor-heading"><a href="#api-wen-dang">¶</a><a href="javascript:void(0)" id="api-wen-dang" class="anchor-point"></a>API 文档</h3>\n<p><code>Form</code> 的 API 较多，文档里遗漏某些 API 的话请尝试搜索 tsdoc 生成的 <a href="../../apidoc">API 文档</a>，同时可以在 <a href="https://github.com/youzan/zent/issues/new">Github 上提个 issue</a>，帮助我们改进文档，issue 里请详细描述少了哪个 API 或者组件的信息。</p>\n<h3 class="anchor-heading"><a href="#form-de-fen-ceng-jie-gou">¶</a><a href="javascript:void(0)" id="form-de-fen-ceng-jie-gou" class="anchor-point"></a>Form 的分层结构</h3>\n<p>为了帮助更好的理解和使用 <code>Form</code>，先从设计的角度对 <code>Form</code> 做一个概述。<code>Form</code> 设计上可以大致分为 3 层：</p>\n<ul>\n<li>数据层：这一层在内部由一个叫 <code>formulr</code> 的内部包构成，它和 UI 无关</li>\n<li>React 绑定层：这一层也在 <code>formulr</code> 内，但只包含最基础的 Hooks（例如 <code>useField</code> 等），依旧和 UI 无关</li>\n<li>UI 层：这一层负责处理数据层和 <code>Zent</code> 组件库的适配，这一层只处理 UI 逻辑，不关心数据的具体处理逻辑</li>\n</ul>\n<h3 class="anchor-heading"><a href="#shu-ju-ceng">¶</a><a href="javascript:void(0)" id="shu-ju-ceng" class="anchor-point"></a>数据层</h3>\n<p>数据层主要由各种类型的 model, validator 以及 builder 构成。model 主要分为以下几种：</p>\n<ul>\n<li><code>IModel</code> 这是最底层 interface，所有 model 都实现它</li>\n<li><code>BasicModel</code> 这是一个 model 的基类，所有 model 都继承自它</li>\n<li><code>FieldModel</code> 单个表单域的 model</li>\n<li><code>FieldArrayModel</code> 一组相同表单域的 model</li>\n<li><code>FieldSetModel</code> 一组有相关性的表单域，通常这些表单域作为一个整体才有意义，比如手机号的国家代码+号码</li>\n<li><code>FormModel</code> 继承自 <code>FieldSetModel</code>，从数据层看就是 <code>FieldSetModel</code>，但是额外添加了一些表单顶层才需要的能力</li>\n<li><code>ModelRef</code> 类似 React 的 ref 概念，它的用处是在不知道具体的 model 类型时用作占位元素。只有 <code>View</code> 模式下才会出现。</li>\n</ul>\n<p>model 是数据和状态的容器，所以 model 上只有操作数据和状态的方法。不管 model 是什么类型，一个 model 上一定维护着值、校验状态、错误信息以及 touched 等一些基础状态，以及读取/操作这些信息的方法。下面是所有 model 上一些常见的方法和属性列表，额外的方法和属性可以通过 <a href="../../apidoc">API 文档</a>中搜索相应的 model 类型查看。</p>\n<ul>\n<li><code>value</code> 获取 model 当前的值</li>\n<li><code>getSubmitValue()</code> 获取用于表单提交的值，可以通过 <code>Field</code> 的 <code>normalize</code> 属性自定义格式化逻辑</li>\n<li><code>initialize(value: Value)</code> 初始化 model 值</li>\n<li><code>patchValue(value: Value)</code> 更新 model 值</li>\n<li><code>reset()</code> 重置 model 为初始值</li>\n<li><code>clear()</code> 重置 model 为默认值</li>\n<li><code>valid()</code> 返回 model 是否通过检验，该函数不会触发校验</li>\n<li><code>validate(options?: ValidateOption)</code> 触发 model 上的校验逻辑</li>\n<li><code>error</code> 获取 model 上的错误信息</li>\n<li><code>clearError()</code> 清楚 model 的错误信息</li>\n<li><code>dirty()</code> model 值是否被修改过</li>\n<li><code>pristine()</code> model 值是否从未被修改过</li>\n<li><code>touched()</code> model 对应的 Field 是否被用户操作过</li>\n</ul>\n<p><code>FieldArrayModel</code> 上还有一批类似数组操作元素的方法，行为和数组上的方法一致，接受值或者 model 对象作为参数。</p>\n<ul>\n<li><code>push</code></li>\n<li><code>pop</code></li>\n<li><code>shift</code></li>\n<li><code>unshift</code></li>\n<li><code>splice</code></li>\n<li><code>children</code> 获取所有子 model，是个只读数组</li>\n<li><code>get(index: number)</code> 返回指定下标处的子 model 对象</li>\n</ul>\n<p><code>FieldSetModel</code> 上的额外方法：</p>\n<ul>\n<li><code>children</code> 获取所有子 model，是个只读对象</li>\n<li><code>get(name: string)</code> 返回指定名字的子 model 对象</li>\n<li><code>registerChild(name, model): void</code> 注册一个子 model 对象</li>\n<li><code>removeChild(name)</code> 删除一个子 model</li>\n</ul>\n<p>⚠️ 注意：不要直接操作 <code>FieldArrayModel</code> 和 <code>FieldSetModel</code> 的 <code>children</code> 属性（本身就是只读属性），请使用 model 上提供的 mutation API 操作，否则会破坏 model 内部数据一致性，导致不可预期的问题。</p>\n<p>validator 和 builder 下文会详细说明。</p>\n<h3 class="anchor-heading"><a href="#form-de-yun-xing-mo-shi">¶</a><a href="javascript:void(0)" id="form-de-yun-xing-mo-shi" class="anchor-point"></a>Form 的运行模式</h3>\n<p><strong>这是使用 <code>Form</code> 时的一个非常重要的概念，请一定理解清楚。另外，我们推荐使用 <code>Model</code> 模式，而非 <code>View</code> 模式。</strong></p>\n<p>在 <code>ModelRef</code> 里提到了 <code>Form</code> 的 <code>View</code> 模式，这里详细说明以下 <code>Form</code> 的两种运行模式(<code>FormStrategy</code>)，<code>View</code> 模式和 <code>Model</code> 模式。</p>\n<ul>\n<li><code>View</code> 模式是指表单的 model 是通过 UI 的结构，由 <code>Form</code> 自动推导生成的。简单来说，先有 UI，再有 model。上面提到的 <code>ModelRef</code> 即是在一些场景下 model 还未生成时用来做占位的，所以才说 <code>ModelRef</code> 仅出现在 <code>View</code> 模式下。</li>\n<li><code>Model</code> 模式则是由开发者创建好表单的 model 结构，然后作为 <code>Form</code> 的初始化参数传入的，所以是先有 model，再有 UI。</li>\n</ul>\n<p><code>FormStrategy</code> 指明了表单是由视图驱动（View 模式）的还是独立数据驱动（Model 模式），两种模式在使用 API 时也会有差异。</p>\n<ul>\n<li>当使用 <code>View</code> 模式时，表单项组件和 <code>hooks</code> 接受一个 <code>name</code> 参数而不是一个 model。</li>\n<li>当使用 <code>Model</code> 时，由于数据层是在表单外构建的，表单组件必须直接传入该字段对应的 <code>model</code>，而不是 <code>name</code>；但是使用 Form 的 Hooks 时，支持传入字段 <code>name</code> 或者 <code>model</code>，这种场景相当于是一个只读的订阅行为。</li>\n<li>除了上述区别之外，<strong>不同模式下表单组件以及 <code>hooks</code> 会有一些参数不同</strong>，具体请查阅 <a href="apidoc">API 文档</a>。</li>\n</ul>\n<h3 class="anchor-heading"><a href="#chang-yong-form-api">¶</a><a href="javascript:void(0)" id="chang-yong-form-api" class="anchor-point"></a>常用 <code>Form</code> API</h3>\n<p><code>form</code> 对象具备一些基础的能力：</p>\n<ul>\n<li><code>form.submit()</code> 显式触发表单提交事件，会自动触发表单校验。</li>\n<li><code>form.isSubmitting</code> 表单是否在提交中。</li>\n<li><code>form.isSubmitFailed</code> 表单上一次提交是否失败。</li>\n<li><code>form.isSubmitSucceeded</code> 表单上一次提交是否成功。</li>\n<li><code>form.validate()</code> 触发一次表单校验。</li>\n<li><code>form.isValid()</code> 表单是否通过校验，不会自动触发 <code>form.validate</code>。</li>\n<li><code>form.isValidating()</code> 表单是否正在校验过程中。</li>\n<li><code>form.model</code> 获取表单对应的 model 对象。</li>\n<li><code>form.getValue()</code> 获取表单当前的值。</li>\n<li><code>form.getSubmitValue()</code> 获取表单当前的值，用于需要在提交前通过 <code>normalizeBeforeSubmit</code> 格式化表单值的场景。</li>\n<li><code>form.patchValue()</code> 更新给定字段的值。</li>\n<li><code>form.initialize()</code> 初始化表单值，同时将这个值作为表单的 <code>initialValue</code> 。</li>\n<li><code>form.resetValue()</code> 将所有字段重置为 <code>initialValue</code> ，不会触发表单事件，如果 <code>initialValue</code> 不存在，则使用 <code>defaultValue</code> 。</li>\n<li><code>form.clear()</code> 将所有字段赋值为 <code>defaultValue</code> ，同时清空 <code>initialValue</code> 。</li>\n<li><code>form.reset()</code> 显式触发表单重置事件 。</li>\n</ul>\n<h4 class="anchor-heading"><a href="#form-zu-jian-de-props">¶</a><a href="javascript:void(0)" id="form-zu-jian-de-props" class="anchor-point"></a><code>Form</code> 组件的 Props</h4>\n<ul>\n<li><code>form</code> <code>useForm</code> 的返回值</li>\n<li><code>layout</code> 表单的布局模式，目前支持水平布局或者垂直布局</li>\n<li><code>disabled</code> 禁用表单输入，开启后表单内所有元素不可编辑。注意：自定义组件需要自己实现禁用逻辑和展示</li>\n<li><code>disableEnterSubmit</code> 禁用表单内 <code>input</code> 元素的回车提交功能</li>\n<li><code>onReset</code> 表单重置回调函数，<code>form.reset</code> 或者原生的 DOM 触发的 <code>reset</code> 事件都会触发 <code>onReset</code></li>\n<li><code>onSubmit</code> 表单提交回调函数，<code>form.submit</code> 或者原生的 DOM 触发的 <code>submit</code> 事件都会触发 <code>onSubmit</code></li>\n<li><code>onSubmitFail</code> 表单提交失败时的回调函数</li>\n<li><code>onSubmitSuccess</code> 表单提交成功时的回调函数</li>\n<li><code>scrollToError</code> 表单校验报错时自动滚动到第一个错误的位置</li>\n<li>\n<p><code>willScrollToError</code> 触发滚动到第一个错误前的回调函数，如果返回一个 <code>Promise</code>，当 <code>Promise</code> <code>resolve</code> 时才会继续执行滚动，<code>reject</code> 将终止滚动操作。 可以返回 <code>IFormScrollToErrorOptions</code> 用来调整滚动的节点和位置</p>\n<ul>\n<li><code>scrollContainer</code> 自定义滚动的 DOM 节点，默认 <code>document.body</code></li>\n<li><code>offsetX</code> 自定义滚动的 x 轴偏移量</li>\n<li><code>offsetY</code> 自定义滚动的 y 轴偏移量</li>\n</ul>\n</li>\n<li>详细参数请<a href="../../apidoc/interfaces/iformprops.html">参考这里</a></li>\n</ul>\n<h4 class="anchor-heading"><a href="#defaultvalue-vs-initialvalue">¶</a><a href="javascript:void(0)" id="defaultvalue-vs-initialvalue" class="anchor-point"></a><code>defaultValue</code> vs <code>initialValue</code></h4>\n<ul>\n<li><code>initialValue</code>：初始值，在逻辑上作为表单首次展示的值，可以被更新。</li>\n<li><code>defaultValue</code>：缺省值，在表单没有输入时使用的值，组件一旦渲染就不可再被更新。</li>\n</ul>\n<h3 class="anchor-heading"><a href="#hooks">¶</a><a href="javascript:void(0)" id="hooks" class="anchor-point"></a>Hooks</h3>\n<p><code>Form</code> 提供以下基础的 hooks，在内置的这些 <code>Form</code> 组件无法满足需要时，可以使用这些 hooks 来封装自定义的 <code>Form</code> 组件。</p>\n<ul>\n<li><code>Form.useForm</code> 获取 <code>Form</code> 对象，<a href="../../apidoc/globals.html#useform">查看 API 文档</a></li>\n<li><code>Form.useField</code> 获取 <code>Field</code>，<a href="../../apidoc/globals.html#usefield">查看 API 文档</a></li>\n<li><code>Form.useFieldArray</code> 获取 <code>FieldArray</code>，<a href="../../apidoc/globals.html#usefieldarray">查看 API 文档</a></li>\n<li><code>Form.useFieldSet</code> 获取 <code>FieldSet</code>，<a href="../../apidoc/globals.html#usefieldset">查看 API 文档</a></li>\n</ul>\n<h4 class="anchor-heading"><a href="#ji-chu-shi-yong-fang-fa">¶</a><a href="javascript:void(0)" id="ji-chu-shi-yong-fang-fa" class="anchor-point"></a>基础使用方法</h4>\n<p>所有表单组件必须包裹在一个 <code>Form</code> 组件内部，每一个表单项对应一个 <code>Field</code>，我们已经内置了 Zent 组件对应的 <code>Field</code> 组件；也可以使用自己封装的自定义表单项组件。</p>\n<ul>\n<li><code>FormInputField</code></li>\n<li><code>FormSelectField</code></li>\n<li><code>FormRadioGroupField</code></li>\n<li><code>FormCheckboxField</code></li>\n<li><code>FormCheckboxGroupField</code></li>\n<li><code>FormNumberInputField</code></li>\n<li><code>FormSwitchField</code></li>\n<li><code>FormColorPickerField</code></li>\n<li><code>FormDatePickerField</code></li>\n<li><code>FormWeekPickerField</code></li>\n<li><code>FormMonthPickerField</code></li>\n<li><code>FormQuarterPickerField</code></li>\n<li><code>FormYearPickerField</code></li>\n<li><code>FormTimePickerField</code></li>\n<li><code>FormTimeRangePickerField</code></li>\n<li><code>FormDateRangePickerField</code></li>\n<li><code>FormCombinedTimeRangePickerField</code></li>\n<li><code>FormCombinedDateRangePickerField</code></li>\n<li><code>FormDateRangeQuickPickerField</code></li>\n</ul>\n<p><code>Field</code> 组件支持的完整参数列表可以<a href="../../apidoc/interfaces/iformfieldpropsbase.html">参考这里</a>，以及<a href="../../apidoc/interfaces/iformcontrolprops.html">这里除 <code>invalid</code> 之外的参数</a>；这些都是两种模式下通用的参数。</p>\n<ul>\n<li><code>after</code> 在表单项后面显示的自定义内容</li>\n<li><code>before</code> 在表单项前面显示的自定义内容</li>\n<li><code>format</code> 渲染前会先调用 <code>format</code> 格式化</li>\n<li><code>normalize</code> 触发 <code>onChange</code> 时会先经过 <code>normalize</code> 再写入到内部的 model 上</li>\n<li><code>getValidateOption</code> 根据触发校验的事件源头返回校验规则</li>\n<li><code>helpDesc</code> 表单项说明文案</li>\n<li><code>notice</code> 表单项警示性文案</li>\n<li><code>renderError</code> 自定义错误渲染，参数是 validator 返回的对象，一次只会有一个错误</li>\n<li><code>required</code> 是否必填，如果这项有值，会在校验规则里添加一个 <code>required</code> 规则，相当于一个快捷设置</li>\n<li><code>touchWhen</code> 什么时候标记表单项为 <code>touched</code></li>\n<li><code>validateOccasion</code> 什么时候触发校验</li>\n<li><code>withoutError</code> 不显示错误，开启后一般需要自行处理错误的展示</li>\n<li><code>withoutLabel</code> 默认不传 <code>label</code> 的时候也会留有 <code>label</code> 的空间，使用 <code>withoutLabel</code> 去掉这个留空</li>\n<li><code>label</code> 表单项的名称</li>\n<li><code>className</code> 自定义类名</li>\n<li><code>children</code> 不解释</li>\n<li><code>modelRef</code> Field 对应 model 的 ref，可以通过这个 <code>modelRef.current</code> 直接访问 model 上的方法和属性</li>\n</ul>\n<p><code>View</code> 模式还支持<a href="../../apidoc/interfaces/iformfieldviewdrivenprops.html">以下参数</a>。</p>\n<ul>\n<li><code>defaultValue</code> 缺省值，作为没有用户输入时的值，不可变</li>\n<li><code>destroyOnUnmount</code> 是否在组件 <code>unmount</code> 的时候销毁 model 对象，销毁时机依赖 React 执行时机。<strong>使用前请看下面的注意事项。</strong></li>\n<li><code>initialValue</code> 初始值，在逻辑上作为字段首次展示的值，可变</li>\n<li><code>name</code> 表单项对应的数据字段名</li>\n<li><code>normalizeBeforeSubmit</code> 用于表单提交前格式化 <code>Field</code> 值的回调函数</li>\n<li><code>validators</code> 校验规则列表，执行的时候会按数组顺序逐个调用，直到所有都通过或者在第一个失败的地方停止</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>不要在 <code>View</code> 模式下通过<strong>条件渲染</strong>将同一个 <code>name</code> 的 \bmodel 渲染成不同的 <code>Field</code> 实例，并且同时在 <code>Field</code> 上开启 <code>destroyOnUnmount</code> 参数。我们认为这是很 tricky 的不合理用法，一旦发现这种场景，<code>name</code> 对应的那个 <code>Field</code> 将进入不可用状态，后续所有操作都会报错。</li>\n<li>在 <code>View</code> 模式下使用 <code>FieldArray</code> 时，由于该组件的特殊性，虽然此时传给 <code>Field</code> 的是个 <code>ModelRef</code>，按之前提到的规则这就是 <code>Model</code> 模式，但是校验规则还是需要设置在表单项上。</li>\n</ul>\n<p><code>Model</code> 模式还支持<a href="../../apidoc/interfaces/iformfieldmodeldrivenprops.html">以下参数</a>。注意，此模式下校验规则正常是设置在 model 上的，而不是表单项组件上。</p>\n<ul>\n<li><code>model</code> 表单项对应的数据</li>\n<li><code>initialValue</code> 初始值，用于覆盖 model 上的初始值，仅当值不等于 <code>undefined</code> 时生效</li>\n</ul>\n<p>注意：如果需要给 <code>Field</code> 封装的组件传递 props，需要将所有 props 通过 <code>props</code> 传递，例如 <code>&#x3C;FormInputField props={{ spellCheck: false }} /></code>，<code>spellCheck</code> 将会被透传到 <code>Input</code> 组件上；如果直接写在 <code>FormInputField</code> 上不会生效。</p>\n<h3 class="anchor-heading"><a href="#biao-dan-xiao-yan">¶</a><a href="javascript:void(0)" id="biao-dan-xiao-yan" class="anchor-point"></a>表单校验</h3>\n<p>通过 <code>Field</code> 上的 <code>validators</code> 参数来设置表单项的校验规则；也可以在 <code>FieldArray</code> 或者 <code>FieldSet</code> 上设置校验规则，这是高级用法，请<a href="#fei-field-ceng-ji-de-xiao-yan">参考这一节</a>。</p>\n<p>表单校验函数定义:</p>\n<pre><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">AsyncValidator<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  ctx<span class="token operator">:</span> ValidatorContext<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&#x3C;</span>IMaybeError<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token operator">|</span> Observable<span class="token operator">&#x3C;</span>IMaybeError<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">SyncValidator<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> ValidatorContext<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> IMaybeError<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>\n<ul>\n<li>如果返回 <code>null</code> 或者 <code>undefined</code> 表示校验通过；当校验失败时返回一个<a href="../../apidoc/interfaces/ivalidateresult.html">包含错误信息的对象</a>。</li>\n<li>支持返回 <code>Promise</code> 或 <code>Observable</code> 进行异步校验</li>\n<li>使用 <code>Form.createAsyncValidator</code> 来创建一个异步校验函数，<a href="../../apidoc/globals.html#createasyncvalidator">查看函数定义</a>；通过 <code>Form.isAsyncValidator</code> 来判断函数是不是异步校验函数，<a href="../../apidoc/globals.html#isasyncvalidator">查看函数定义</a></li>\n<li>通过 <code>Field</code> 的 <code>validateOccasion</code> 参数控制校验时机</li>\n<li>通过 <code>Field</code> 的 <code>getValidateOption</code> 参数控制校验规则的运行时机以及哪些校验规则需要运行</li>\n<li><code>validator</code> 的执行顺序是 <code>validators</code> 数组的元素顺序，通常建议把异步校验放在最后</li>\n<li>\n<p><code>ctx</code> 参数上有几个获取表单值的方法，当校验依赖其他字段的值时可能需要用到</p>\n<ul>\n<li><code>getFormValue()</code> 获取整个表单当前的值</li>\n<li><code>getSectionValue(...names)</code> 获取当前 FieldSet 或者 Form 下的某个字段的值</li>\n<li><code>getSection()</code> 或者所属 FieldSet 或者 Form 的 model 对象。</li>\n</ul>\n</li>\n</ul>\n<h4 class="anchor-heading"><a href="#nei-zhi-de-xiao-yan-gui-ze">¶</a><a href="javascript:void(0)" id="nei-zhi-de-xiao-yan-gui-ze" class="anchor-point"></a>内置的校验规则</h4>\n<ul>\n<li><a href="../../apidoc/globals.html#min"><code>Validators.min</code></a></li>\n<li><a href="../../apidoc/globals.html#max"><code>Validators.max</code></a></li>\n<li><a href="../../apidoc/globals.html#required"><code>Validators.required</code></a></li>\n<li><a href="../../apidoc/globals.html#requiredtrue"><code>Validators.requiredTrue</code></a></li>\n<li><a href="../../apidoc/globals.html#email"><code>Validators.email</code></a></li>\n<li><a href="../../apidoc/globals.html#minlength"><code>Validators.minLength</code></a></li>\n<li><a href="../../apidoc/globals.html#maxlength"><code>Validators.maxLength</code></a></li>\n<li><a href="../../apidoc/globals.html#pattern"><code>Validators.pattern</code></a></li>\n</ul>\n<h3 class="anchor-heading"><a href="#fei-field-ceng-ji-de-xiao-yan">¶</a><a href="javascript:void(0)" id="fei-field-ceng-ji-de-xiao-yan" class="anchor-point"></a>非 <code>Field</code> 层级的校验</h3>\n<p><code>FieldSet</code> 和 <code>FieldArray</code> 和 <code>Field</code> 一样可以设置校验规则，这些校验规则是运行在 <code>FieldSet</code> 和 <code>FieldArray</code> 层级的，能拿到下层的所有数据，可以用来实现跨 <code>Field</code> 的校验。</p>\n<h3 class="anchor-heading"><a href="#xiao-yan-xuan-xiang">¶</a><a href="javascript:void(0)" id="xiao-yan-xuan-xiang" class="anchor-point"></a>校验选项</h3>\n<p>校验选项共有以下几种：</p>\n<ul>\n<li><code>ValidateOption.Empty</code>：校验会往上层冒泡，但不往下递归触发校验，并且会包含没有修改过的 <code>Field</code>，不校验没有 touch 过的 <code>Field</code>，不触发异步校验</li>\n<li><code>ValidateOption.Default</code>：默认行为，等同于<code>ValidateOption.Empty</code></li>\n<li><code>ValidateOption.IncludeAsync</code>：校验时包含异步校验</li>\n<li><code>ValidateOption.IncludeUntouched</code>：仅对满足<code>!!model.touched() === true</code>的字段进行校验</li>\n<li><code>ValidateOption.IncludeChildrenRecursively</code>：递归校验下层的 <code>Field</code>，适用于直接从 <code>Form</code>，<code>FieldSet</code> 或者 <code>FieldArray</code> 触发的校验</li>\n<li><code>ValidateOption.ExcludePristine</code>：不校验没有修改过的 <code>Field</code></li>\n<li><code>ValidateOption.StopPropagation</code>：校验时不往上一级 <code>FieldSet</code> 或者 <code>FieldArray</code> 冒泡，冒泡会一直到最顶层的 <code>Form</code>。</li>\n</ul>\n<p>校验选项是一个 <code>BitSet</code>，在自定义表单组件中，使用 <code>Model</code> 上的 <code>validate</code> 方法进行校验时，使用 <code>|</code> 运算符联合所需的选项作为参数传入即可。</p>\n<p>不传参数调用 <code>form.validate()</code> 等价于 <code>form.validate(ValidateOption.Default | ValidateOption.IncludeChildrenRecursively)</code>。如果调用 <code>form.validate</code> 时手动指定校验选项的话需要自行设置需要的所有选项，包括默认的两个选项。</p>\n<h3 class="anchor-heading"><a href="#xiao-yan-zhong-jian-jian">¶</a><a href="javascript:void(0)" id="xiao-yan-zhong-jian-jian" class="anchor-point"></a>校验中间件</h3>\n<p>校验中间件作用于<strong>校验函数本身</strong>，可以把它视作用来装饰函数的装饰器；通过中间件可以为内置的校验函数提供一些额外能力，例如条件校验。</p>\n<p>使用 <code>FieldUtils.compose</code> 可以将多个中间件组合成一个，文档底部有 <code>FieldUtils.compose</code> 的 API 描述。</p>\n<p>校验中间件的函数签名：</p>\n<pre><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">Middleware<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>next<span class="token operator">:</span> IValidator<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> IValidator<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>\n<h4 class="anchor-heading"><a href="#nei-zhi-de-xiao-yan-zhong-jian-jian">¶</a><a href="javascript:void(0)" id="nei-zhi-de-xiao-yan-zhong-jian-jian" class="anchor-point"></a>内置的校验中间件</h4>\n<ul>\n<li><code>when</code> 满足条件时才执行校验逻辑</li>\n<li><code>whenAsync</code> 同 <code>when</code>，适用于移步校验函数</li>\n<li><code>message</code> 根据值返回动态的错误信息</li>\n</ul>\n<h4 class="anchor-heading"><a href="#ding-yue-xiao-yan-zhuang-tai">¶</a><a href="javascript:void(0)" id="ding-yue-xiao-yan-zhuang-tai" class="anchor-point"></a>订阅校验状态</h4>\n<p>这个功能虽然不是很常用，但是 Zent 提供了 2 种监听表单校验状态的方法：</p>\n<ul>\n<li><code>Form.FieldValid</code>：接收 <code>name</code> 或 <code>model</code>，将其校验状态作为 <code>children</code> 的第一个参数</li>\n<li><code>Form.useFieldValid</code>：接收 <code>name</code> 或 <code>model</code>，返回其校验状态</li>\n<li><code>Form.useFormValid</code>：接收 <code>ZentForm</code> 对象（即 <code>useForm</code> 的返回值），返回表单的校验状态</li>\n<li>订阅 <code>FieldArray</code>, <code>FieldSet</code> 或者 <code>Form</code> 的校验状态可能会导致性能问题，因为这些是容器类型，订阅它们意味着需要订阅它们内部包含的所有表单项的校验状态变化，这是一个非常耗资源并且影响性能的操作，所以不推荐大范围频繁使用；开发模式下在 console 中会有一个警告信息。</li>\n</ul>\n<h3 class="anchor-heading"><a href="#usefieldarray-he-fieldset">¶</a><a href="javascript:void(0)" id="usefieldarray-he-fieldset" class="anchor-point"></a><code>useFieldArray</code> 和 <code>FieldSet</code></h3>\n<ul>\n<li>\n<p><code>useFieldArray</code> 用于封装一组一样的表单项处理逻辑；<code>FieldSet</code> 用来封装一组相关的表单项处理逻辑。</p>\n</li>\n<li>\n<p>注意并没有所谓的 <code>FieldArray</code> 组件，直接使用 <code>Form.useFieldArray</code> 这个 hooks 即可。该函数有两个重载的实现，分别对应 <code>Form</code> 的两种运行模式。</p>\n</li>\n<li>\n<p><code>useFieldArray</code> 的参数定义请<a href="../../apidoc/globals.html#usefieldarray">参考这里</a>。</p>\n</li>\n<li>\n<p><code>useFieldArray</code> 返回值是一个 <code>FieldArrayModel</code>，通过 <code>children</code> 就能访问到所有数据，一般在 <code>render</code> 函数里对 <code>children</code> 做 <code>map</code> 操作即可。</p>\n</li>\n<li>\n<p><code>FieldArrayModel</code> 上还有一些操作方法： <code>push</code>，<code>pop</code>，<code>shift</code>，<code>unshift</code>，<code>splice</code>，类似数组上对应的方法，用于操作子元素。对 <code>FieldArrayModel</code> 内元素做增删应该使用前面说的这些方法，不应该通过 <code>patchValue</code> 来实现增删，因为 <code>patchValue</code> 只更新值，会导致内部 model 状态不一致。</p>\n</li>\n<li>\n<p><code>FieldSet</code> 组件和 <code>Form</code> 一样有两种运行模式，<code>View</code> 模式可以通过 <code>name</code> 参数指定对应的数据来源；<code>Model</code> 模式则通过 <code>model</code> 参数或者 <code>name</code> 参数显式的设置数据来源。</p>\n</li>\n</ul>\n<p><code>FieldSet</code> 两种模式公用的参数可以在<a href="../../apidoc/interfaces/ifieldsetbaseprops.html">这里查看</a>。</p>\n<ul>\n<li><code>validators</code> 校验规则数组，按数组顺序执行，直到所有都通过或者在第一个失败的地方停止</li>\n<li><code>scrollAnchorRef</code> 表单提交时滚动到错误时的 DOM 元素的 ref(来自 <code>React.createRef</code> 或 <code>React.useRef</code>)</li>\n<li><code>renderError</code> 用于渲染整个 <code>FieldSet</code> 层面的错误</li>\n<li><code>children</code> 不解释</li>\n</ul>\n<p><code>View</code> 模式额外的参数：</p>\n<ul>\n<li><code>destroyOnUnmount</code> 是否在组件 <code>unmount</code> 的时候销毁 model 对象，销毁时机依赖 React 执行时机。</li>\n<li><code>normalizeBeforeSubmit</code> 用于表单提交前格式化 <code>FieldSet</code> 值的回调函数</li>\n<li><code>validators</code> <code>FieldSet</code> 本身的校验规则列表，注意和内部 Field 的校验规则没有关系。执行的时候会按数组顺序逐个调用，直到所有都通过或者在第一个失败的地方停止</li>\n</ul>\n<h3 class="anchor-heading"><a href="#builder-api-he-model-mo-shi">¶</a><a href="javascript:void(0)" id="builder-api-he-model-mo-shi" class="anchor-point"></a>Builder API 和 Model 模式</h3>\n<p>使用 <code>Form</code> 的 <code>Model</code> 模式需要自己手动创建 model，我们提供了 builder API 来帮助完成这个操作。每个函数返回的都是一个 <code>Builder</code> 对象，<code>Builder</code> 对象都有一个 <code>validators</code> 方法用来配置 model 的校验规则。<strong>Builder API 都支持链式调用</strong>。</p>\n<ul>\n<li><code>Form.form</code> 参数是个对象，用来描述整个 <code>Form</code> model 的结构, <a href="../../apidoc/globals.html#form">查看函数定义</a></li>\n<li><code>Form.field</code> 参数是 <code>Field</code> 的默认值，<a href="../../apidoc/globals.html#field">查看函数定义</a></li>\n<li><code>Form.set</code> 参数是个对象，用来描述这个表单集合的结构，<a href="../../apidoc/globals.html#set">查看函数定义</a></li>\n<li><code>Form.array</code> 参数是一个其他函数返回的 <code>Builder</code> 对象，<code>array</code> 返回的 <code>Builder</code> 对象上有 <code>defaultValue</code> 用于设置这个 array 中的表单项的默认值，<a href="../../apidoc/globals.html#array">查看函数定义</a></li>\n</ul>\n<h3 class="anchor-heading"><a href="#model-mo-shi-dong-tai-zeng-jia-shan-chu-biao-dan-xiang">¶</a><a href="javascript:void(0)" id="model-mo-shi-dong-tai-zeng-jia-shan-chu-biao-dan-xiang" class="anchor-point"></a>Model 模式动态增加/删除表单项</h3>\n<p>有些联动的场景需要在表单项变化的时候动态删除或者增加表单项，我们提供了一组 API 来支持这类使用场景。</p>\n<p>每个 model 上都有一个 <code>builder</code> 的属性，通过这个属性能够获取到这个 model 对应的 builder 对象，通过 <code>builder.build()</code> 方法就可以可以生成一个行为一样的 model 对象。注意，<code>builder</code> 对象仅在通过上述 <code>Builder</code> API 生成的 model，<code>View</code> 模式下的 model 上这个属性永远是空的。</p>\n<p>除此之外，<code>FieldSetModel</code> 以及 <code>FormModel</code> 上提供了两个方法用来完成子 model 的删除和增加：</p>\n<ul>\n<li><code>removeChild&#x3C;T extends keyof Children>(name: T): Children[T] | null</code></li>\n<li><code>registerChild(name: string, model: BasicModel): void</code></li>\n</ul>\n<p><code>FieldArrayModel</code> 的 <code>push</code>, <code>unshift</code> 以及 <code>splice</code> 方法也支持直接传入 model。</p>\n<p>由于 <code>FieldSetModel</code> 和 <code>FormModel</code> 子 model 的增删需要触发组件重绘，因此提供了一个额外的 hook 来处理：</p>\n<ul>\n<li><code>Form.useNamedChildModel(parent: FieldSetModel, name: string): BasicModel</code>，注意 <code>FormModel</code> 是 <code>FieldSetModel</code> 的子类，所以也适用于这个方法。这个 hook 不监听子 model 内部状态的变化，如有需要，需使用 <code>useNamedChildModel</code> 返回 model 对象自行调用 <code>useField</code> 等 hook 来实现。</li>\n</ul>\n<p>通过结合上述这些能力，就可以完成 <code>Model</code> 模式下表单项的动态增删了。</p>\n<h3 class="anchor-heading"><a href="#biao-dan-zhi-de-ge-shi-hua">¶</a><a href="javascript:void(0)" id="biao-dan-zhi-de-ge-shi-hua" class="anchor-point"></a>表单值的格式化</h3>\n<ul>\n<li>可以通过 <code>normalize</code> 和 <code>format</code> 参数来格式化 <code>Field</code> 的输入输出</li>\n<li>也可以使用 <code>normalizeBeforeSubmit</code> 属性和 <code>form.getSubmitValue()</code> 方法，在不改变 model 内存储值的情况下修改表单提交的值</li>\n</ul>\n<h3 class="anchor-heading"><a href="#du-qu-ding-yue-biao-dan-zhi">¶</a><a href="javascript:void(0)" id="du-qu-ding-yue-biao-dan-zhi" class="anchor-point"></a>读取/订阅表单值</h3>\n<p>试想一个使用场景：我们要实现一个活动编辑器，右侧是编辑框，左侧是实时预览；这种场景下除了需要一个地方来输入表单的各个值之外，还需要在另外一个地方读取这些表单值。我们提供了一套统一的简单易用，并且使用姿势和 <code>Field</code> 非常相似的 API 来实现组件值的按需读取。这些组件只会监听所需的数据变化，不会因为没有监听的表单项变化了而产生重绘。</p>\n<ul>\n<li><code>Field</code> 组件对应 <code>FieldValue</code>，<code>View</code> 模式下指定一个 <code>name</code>；<code>Model</code> 模式下指定一个 <code>model</code></li>\n<li><code>FieldSet</code> 组件对应 <code>FieldSetValue</code>，只有一个 <code>name</code> 参数；如果是 <code>Model</code> 模式下已经拿到对应的 model 对象了，那么直接将 <code>model.get(xxx)</code> 传给 <code>FieldValue</code> 组件即可</li>\n<li><code>Form.useFieldArray</code> 对应 <code>useFieldArrayValue</code>，<code>View</code> 模式下指定一个 <code>name</code>；<code>Model</code> 模式下指定一个 <code>model</code> 或者 <code>name</code>。注意，它只会监听 <code>children</code> 的增、删行为，不会监听 <code>children</code> 内部的变动</li>\n<li><code>Form.useFieldValue</code> 提供了一种 hooks 的风格来获取表单值（包括 FieldSet、FieldArray、Field），它可以深度监听表单值</li>\n<li><code>Form.useFormValue</code> 提供了一种 hooks 的风格来获取整个表单的值，它可以深度监听表单值</li>\n</ul>\n<p>⚠️ 注意：订阅单个表单项的值一般不会有什么问题，但是订阅 <code>FieldArray</code>, <code>FieldSet</code> 或者 <code>Form</code> 的值时需要谨慎，因为这些是容器类型，订阅它们意味着需要订阅它们内部包含的所有表单项的变化，这是一个非常耗资源并且影响性能的操作，所以不推荐大范围频繁使用。针对这个问题，开发模式下会有一个警告信息来提醒使用者。</p>\n<h3 class="anchor-heading"><a href="#tong-guo-model-ding-yue-shu-ju">¶</a><a href="javascript:void(0)" id="tong-guo-model-ding-yue-shu-ju" class="anchor-point"></a>通过 Model 订阅数据</h3>\n<p><code>useFieldValue</code> 传入 Model 类型参数时不依赖 <code>FormContext</code>，因此也可以在表单外部监听数据变更。\n<code>useModelValue</code> 和 <code>useModelValid</code> 已经废弃，不推荐使用，它们的使用场景就是在表单外部通过 Model 对象订阅数据变化。</p>\n<h3 class="anchor-heading"><a href="#biao-dan-zhi-lian-dong">¶</a><a href="javascript:void(0)" id="biao-dan-zhi-lian-dong" class="anchor-point"></a>表单值联动</h3>\n<h3 class="anchor-heading"><a href="#zi-ding-yi-biao-dan-xiang">¶</a><a href="javascript:void(0)" id="zi-ding-yi-biao-dan-xiang" class="anchor-point"></a>自定义表单项</h3>\n<p>实现自定义 <code>Field</code> 的时候会用到这些组件，它们只是样式组件，用来提供和内置 <code>Field</code> 组件一致样式和参数。</p>\n<ul>\n<li><code>Control</code> 封装了 label、自定义组件以及错误信息的结构，<a href="../../apidoc/interfaces/iformcontrolprops.html">查看 Props 文档</a></li>\n<li><code>Label</code> 表单项的 label 组件，适用于连 <code>Control</code> 也不想使用的场景，<a href="../../apidoc/interfaces/ilabelprops.html">查看 Props 文档</a></li>\n<li><code>Error</code> 表单项的错误信息组件，同 <code>Label</code> 一样适用于深度自定义的场景，<a href="../../apidoc/interfaces/iformerrorprops.html">查看 Props 文档</a></li>\n<li><code>useFormChild</code> 使用上述组件时，如果希望支持自动滚动到错误处，需要在组件内使用这个 Hook 关联 model 和 DOM 节点，<a href="../../apidoc/globals.html#useformchild">查看文档</a></li>\n<li><code>CombineErrors</code> 这个组件用来将多个字段的错误聚合成一个错误展示，需要配合 <code>Field</code> 的 <code>withoutError</code> 参数使用，<a href="../../apidoc/interfaces/icombineerrorsprops.html">查看 Props 文档</a></li>\n</ul>\n<h3 class="anchor-heading"><a href="#form-bu-ju">¶</a><a href="javascript:void(0)" id="form-bu-ju" class="anchor-point"></a><code>Form</code> 布局</h3>\n<p><code>Form</code> 组件使用 <code>flex</code> 布局，提供两种简单的样式：水平布局 <code>horizontal</code>， 垂直布局 <code>vertical</code>。</p>\n<h3 class="anchor-heading"><a href="#biao-dan-shang-xia-wen">¶</a><a href="javascript:void(0)" id="biao-dan-shang-xia-wen" class="anchor-point"></a>表单上下文</h3>\n<p>使用<code>FormContext</code>对整个表单的行为进行控制，目前支持对<code>Label</code>组件进行样式自定义</p>\n<pre><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">IZentFormContext</span> <span class="token punctuation">{</span>\n  labelStyle<span class="token operator">?</span><span class="token operator">:</span> CSSProperties<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 class="anchor-heading"><a href="#fieldutils">¶</a><a href="javascript:void(0)" id="fieldutils" class="anchor-point"></a><code>FieldUtils</code></h3>\n<p><code>FieldUtils</code> 提供了一些有用的工具函数，如果不知道干什么用的或者看不懂，说明你没有需求，不需要用到它们，这些工具本身定位就是高级用法。</p>\n<ul>\n<li>useMulti 用来按顺序调用一批函数，只使用它们的副作用，忽略返回值，<a href="../../apidoc/globals.html#usemulti">查看函数定义</a></li>\n<li>usePipe 用来从左往右按顺序调用一批函数，上一个函数的返回值作为下一个函数的参数，返回最后一个函数的返回值，<a href="../../apidoc/globals.html#usepipe">查看函数定义</a></li>\n<li>useCompositionHandler 用来在 <code>model</code> 上维护一个输入法编辑的状态, <code>model.isCompositing</code>，<a href="../../apidoc/globals.html#usecompositionhandler">查看函数定义</a>。组件内部会根据这个状态在输入法输入阶段跳过校验</li>\n<li>makeChangeHandler 生成一个 <code>onChange</code> 回调函数，具体说明请<a href="../../apidoc/globals.html#makechangehandler">查看函数定义</a></li>\n<li>compose 与 usePipe 类似，区别是 usePipe 作为 hook 使用，而 compose 可以用在任何地方，例如组合多个校验函数中间件，<a href="../../apidoc/globals.html#compose">查看函数定义</a></li>\n</ul>'}))}}}}]);